using System;
using System.Collections.Generic;
using System.Linq;
using Pollination.BrowserMessageHandler.Model;

// Auto-generated
namespace {{ NameSpaceName }}
{
    public partial class {{ClassName}}
    {
        public static string SDKName = "{{NameSpaceName}}";
        public static string SDKVersion = "{{SDKVersion}}";

        private static {{ClassName}} _instance;
        private static {{ClassName}} Instance
        {
            get
            {
                _instance = _instance ?? new {{ClassName}}();
                return _instance;
            }
        }

        public static void MessageReceived(string arg, Action<object> returnAction, Adapter adapter)
        {
            MessageProcessor.Adapter = adapter;
            MessageProcessor.Instance.MessageReceived(arg, returnAction);
        }

        public void MessageReceived(string arg, Action<object> returnAction)
        {
            MessageBus msgBus = null;
            MessageBus msgBack = null;
            try
            {
                msgBus = MessageBus.DecodeBase64MessageToMsgBus(arg);
                if (msgBus?.SdkName != SDKName)
                    return;
                ProcessMessage(msgBus, returnAction);
            }
            catch (Exception e)
            {
                msgBack = msgBus == null ? MessageBusHelper.ErrorBus(e) : msgBus.ToErrorBus(e);
                returnAction?.Invoke(msgBack.ToJson());
            }
        }

        public virtual void ProcessMessage(MessageBus msgBus, Action<object> returnAction)
        {
            var msgBack = ProcessMessageBus(msgBus);
            returnAction?.Invoke(msgBack.ToJson());
        }

        public static MessageBus ProcessMessageBus(MessageBus msg)
        {
            MessageBus msgBus = msg;
            MessageBus msgBack = null;
            try
            {
                var method = msgBus.MethodName;
                switch (method)
                {
                    {%- for method in Methods %}
                    case "{{method.MethodName}}":
                        msgBack = Process{{method.MethodName}}(msgBus);
                        break;
                    {%- endfor %}
                    default:
                        throw new ArgumentException($"Non-supported method {method}");
                }


            }
            catch (Exception e)
            {
                msgBack = msgBus == null ? MessageBusHelper.ErrorBus(e) : msgBus.ToErrorBus(e);
                LogHelper.LogError(e);
            }

            if (msgBack == null)
                msgBack = MessageBusHelper.ErrorBus("Unknown Error!");
            return msgBack;
        }

        {%- for method in Methods -%} {%- assign skipComma = true %}
        /// <summary>
        /// Unwrap MessageBus for input parameters and then execute the target method.
        /// {{method.Document}}
        /// </summary>
        private static MessageBus Process{{method.MethodName}}(MessageBus msg)
        {
            {%- for param in method.Params -%}
            {%- if param.HasDefaultValue -%}
            var {{param.CsParameterName}} = msg.TryGetParam<{{param.Type}}>("{{param.CsParameterName}}", out var _{{param.CsParameterName}}) ? _{{param.CsParameterName}} : {{param.DefaultValue}};
            {%- else -%}
            var {{param.CsParameterName}} = msg.TryGetParam<{{param.Type}}>("{{param.CsParameterName}}", out var _{{param.CsParameterName}}) 
                ? _{{param.CsParameterName}} 
                : throw new ArgumentException("Missing argument {{param.CsParameterName}} of {{method.MethodName}}. Please contact developers!");
            {%- endif -%}
            {%- endfor -%}

            // Execute
            {%- if method.HasReturn -%}
            var returnData = Instance.{{method.MethodName}}({% for param in method.Params %}{%- if skipComma %}{%- assign skipComma = false %}{% else %}, {% endif %}{{param.CsParameterName}}: {{param.CsParameterName}}{% endfor %});
            var msgBack = msg.ToReturnBus(returnData);
            {%- else -%}
            Instance.{{method.MethodName}}({% for param in method.Params %}{%- if skipComma %}{%- assign skipComma = false %}{% else %}, {% endif %}{{param.CsParameterName}}: {{param.CsParameterName}}{% endfor %});
            var msgBack = msg.ToReturnBus(true); 
            {%- endif -%}
            return msgBack;
        }


        {%- endfor -%}

    }
}

