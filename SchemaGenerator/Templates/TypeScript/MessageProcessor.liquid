// Auto-generated

import { MessageParamHelper, MessageParam, MessageBusHelper, ProcessorHelper } from "@pollination/browser-message-handler";
{% if HasTsImports -%}
{% for Import in TsImports -%}
import { {{ Import.Name }} } from "{{ Import.From }}";
{% endfor -%}
{% endif -%}

export class MessageProcessorHelper {
  static SDKName = "{{NameSpaceName}}";
  static SDKVersion = "{{SDKVersion}}";

  static MessageBus(
    methodName: string,
    params?: MessageParam[]
  ) {
    return MessageBusHelper.MessageBus(methodName, params, MessageProcessorHelper.SDKName, MessageProcessorHelper.SDKVersion);
  }

  static OperationId: Record<string, string> = {
    {%- for method in Methods -%}
    {{method.MethodName}}: "{{method.OperationId}}",
    {%- endfor -%}
  };

}


{%- for method in Methods -%}
type {{method.MethodName}}Params = {
{%- for param in method.Params -%}
{{param.TsParameterName}}: {{param.Type}};
{%- endfor -%}
};
{%- assign skipComma = true -%}
export const {{method.MethodName}}WithObject = async ({ {%- for param in method.Params -%}{%- if skipComma %}{%- assign skipComma = false %}{% else %}, {% endif %}{{param.TsParameterName}}{%if param.HasDefault %} = {{param.DefaultCodeFormat}}{% endif %}{% endfor %} }: {{method.MethodName}}Params): Promise<{{method.ReturnTypeName}}> => {

  const params: MessageParam[] = [{% for param in method.Params %}{%- if param.HasDefault == false %}
    MessageParamHelper.MessageParam("{{param.TsParameterName}}", {{param.TsParameterName}}),{% endif %}{% endfor %}
  ];
  {%- for param in method.Params -%}  
  {%- if param.HasDefault -%}
  if({{param.TsParameterName}})params.push(MessageParamHelper.MessageParam("{{param.TsParameterName}}", {{param.TsParameterName}}));
  {%- endif -%}
  {%- endfor -%}

  const bus = MessageProcessorHelper.MessageBus("{{method.MethodName}}", params);
  {%- if method.HasReturn -%}
  const done: {{method.ReturnTypeName}} = {% if method.NeedReturnTypeConverter %}ConvertTo{{method.ReturnTypeName}}(await ProcessorHelper.waitForExecution(bus));{% else %}await ProcessorHelper.waitForExecution(bus);{% endif %}
  return done;
  {%- else -%}
  await ProcessorHelper.waitForExecution(bus);
  {%- endif -%}
};

export const {{method.MethodName}} = async ({%- assign skipComma = true -%}{%- for param in method.Params -%}{%- if skipComma %}{%- assign skipComma = false %}{% else %}, {% endif %}{{param.TsParameterName}}: {{param.Type}}{%if param.HasDefault %} = {{param.DefaultCodeFormat}}{% endif %}{% endfor %}): Promise<{{method.ReturnTypeName}}> => {{method.MethodName}}WithObject({ {%- assign skipComma = true -%}{%- for param in method.Params -%}{%- if skipComma %}{%- assign skipComma = false %}{% else %}, {% endif %}{{param.TsParameterName}}{% endfor %} });


{%- endfor -%}