{
  "openapi": "3.0.2",
  "info": {
    "title": "Pollination Model Editor <> Revit SDK.",
    "description": "Available methods to interact with Revit from Pollination Model Editor.",
    "version": "0.0.3"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Home",
        "operationId": "home__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/settings/": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Revit Document Settings",
        "description": "Get general Revit documents settings. Use these settings to set the user interface.",
        "operationId": "revit_document_settings_settings__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevitDocumentSettings"
                }
              }
            }
          }
        }
      }
    },
    "/select/": {
      "post": {
        "tags": [
          "Revit Document"
        ],
        "summary": "Select Items",
        "description": "Select a list of items in the Revit view.",
        "operationId": "select_items_select__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Element Info",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ElementInfo"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/export-selected/": {
      "get": {
        "tags": [
          "Revit Document"
        ],
        "summary": "Export Selected",
        "description": "Export selected rooms, areas or spaces from Revit.",
        "operationId": "export_selected_export_selected__get",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomExportSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Export Selected Export Selected  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PORoom"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/export-by-ids/": {
      "post": {
        "tags": [
          "Revit Document"
        ],
        "summary": "Export By Ids",
        "description": "Export rooms, areas or spaces from Revit. This is usually used to re-parse the Pollination rooms from Revit. This method also updates the room height and elevation in Revit if the values are provided as part of the RoomElementInfo.",
        "operationId": "export_by_ids_export_by_ids__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomExportByIdSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Export By Ids Export By Ids  Post",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PORoom"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plane": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "n": {
                "title": "N",
                "description": "Plane normal as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "o": {
                "title": "O",
                "description": "Plane origin as 3 (x, y, z) values",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "Plane",
                "pattern": "^Plane$",
                "type": "string",
                "readOnly": true
              },
              "x": {
                "title": "X",
                "description": "Plane x-axis as 3 (x, y, z) values. If None, it is autocalculated.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "required": [
              "n",
              "o"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Plane",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Face3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "boundary": {
                "title": "Boundary",
                "description": "A list of points representing the outer boundary vertices of the face. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 3,
                  "maxItems": 3
                }
              },
              "type": {
                "title": "Type",
                "default": "Face3D",
                "pattern": "^Face3D$",
                "type": "string",
                "readOnly": true
              },
              "holes": {
                "title": "Holes",
                "description": "Optional list of lists with one list for each hole in the face.Each hole should be a list of at least 3 points and each point a list of 3 (x, y, z) values. If None, it will be assumed that there are no holes in the face.",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    },
                    "minItems": 3,
                    "maxItems": 3
                  },
                  "minItems": 3
                }
              },
              "plane": {
                "title": "Plane",
                "description": "Optional Plane indicating the plane in which the face exists.If None, the plane will usually be derived from the boundary points.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Plane"
                  }
                ]
              }
            },
            "required": [
              "boundary"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Face3D",
        "description": "A single planar face in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Autocalculate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Autocalculate",
                "pattern": "^Autocalculate$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Autocalculate",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Outdoors": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Outdoors",
                "pattern": "^Outdoors$",
                "type": "string",
                "readOnly": true
              },
              "sun_exposure": {
                "title": "Sun Exposure",
                "description": "A boolean noting whether the boundary is exposed to sun.",
                "default": true,
                "type": "boolean"
              },
              "wind_exposure": {
                "title": "Wind Exposure",
                "description": "A boolean noting whether the boundary is exposed to wind.",
                "default": true,
                "type": "boolean"
              },
              "view_factor": {
                "title": "View Factor",
                "description": "A number for the view factor to the ground. This can also be an Autocalculate object to have the view factor automatically calculated.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Outdoors",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Surface": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "boundary_condition_objects": {
                "title": "Boundary Condition Objects",
                "description": "A list of up to 3 object identifiers that are adjacent to this one. The first object is always the one that is immediately adjacent and is of the same object type (Face, Aperture, Door). When this boundary condition is applied to a Face, the second object in the tuple will be the parent Room of the adjacent object. When the boundary condition is applied to a sub-face (Door or Aperture), the second object will be the parent Face of the adjacent sub-face and the third object will be the parent Room of the adjacent sub-face.",
                "minItems": 2,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "Surface",
                "pattern": "^Surface$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "boundary_condition_objects"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Surface",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ModuleType": {
        "title": "ModuleType",
        "description": "An enumeration.",
        "enum": [
          "Standard",
          "Premium",
          "ThinFilm"
        ],
        "type": "string"
      },
      "MountingType": {
        "title": "MountingType",
        "description": "An enumeration.",
        "enum": [
          "FixedOpenRack",
          "FixedRoofMounted",
          "OneAxis",
          "OneAxisBacktracking",
          "TwoAxis"
        ],
        "type": "string"
      },
      "PVProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnergyBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "PVProperties",
                "pattern": "^PVProperties$",
                "type": "string",
                "readOnly": true
              },
              "rated_efficiency": {
                "title": "Rated Efficiency",
                "description": "A number between 0 and 1 for the rated nameplate efficiency of the photovoltaic solar cells under standard test conditions (STC). Standard test conditions are 1,000 Watts per square meter solar irradiance, 25 degrees C cell temperature, and ASTM G173-03 standard spectrum. Nameplate efficiencies reported by manufacturers are typically under STC. Standard poly- or mono-crystalline silicon modules tend to have rated efficiencies in the range of 14-17%. Premium high efficiency mono-crystalline silicon modules with anti-reflective coatings can have efficiencies in the range of 18-20%. Thin film photovoltaic modules typically have efficiencies of 11% or less. (Default: 0.15 for standard silicon solar cells).",
                "default": 0.15,
                "exclusiveMinimum": 0,
                "exclusiveMaximum": 1,
                "type": "number",
                "format": "double"
              },
              "active_area_fraction": {
                "title": "Active Area Fraction",
                "description": "The fraction of the parent Shade geometry that is covered in active solar cells. This fraction includes the difference between the PV panel (aka. PV module) area and the active cells within the panel as well as any losses for how the (typically rectangular) panels can be arranged on the Shade geometry. When the parent Shade geometry represents just the solar panels, this fraction is typically around 0.9 given that the framing elements of the panel reduce the overall active area. (Default: 0.9, assuming parent Shade geometry represents only the PV panel geometry).",
                "default": 0.9,
                "exclusiveMinimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "module_type": {
                "description": "Text to indicate the type of solar module. This is used to determine the temperature coefficients used in the simulation of the photovoltaic modules. When the rated_efficiency is between 12-18%, the Standard type is typically most appropriate. When the rated_efficiency is greater than 18%, the Premium type is likely more appropriate. When the rated_efficiency is less than 12%, this likely refers to a case where the ThinFilm module type is most appropriate.",
                "default": "Standard",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ModuleType"
                  }
                ]
              },
              "mounting_type": {
                "description": "Text to indicate the type of mounting and/or tracking used for the photovoltaic array. Note that the OneAxis options have an axis of rotation that is determined by the azimuth of the parent Shade geometry. Also note that, in the case of one or two axis tracking, shadows on the (static) parent Shade geometry still reduce the electrical output, enabling the simulation to account for large context geometry casting shadows on the array. However, the effects of smaller detailed shading may be improperly accounted for and self shading of the dynamic panel geometry is only accounted for via the tracking_ground_coverage_ratio property on this object. FixedOpenRack refers to ground or roof mounting where the air flows freely. FixedRoofMounted refers to mounting flush with the roof with limited air flow. OneAxis refers to a fixed tilt and azimuth, which define an axis of rotation. OneAxisBacktracking is the same as OneAxis but with controls to reduce self-shade at low sun angles. TwoAxis refers to a dynamic tilt and azimuth that track the sun.",
                "default": "FixedOpenRack",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MountingType"
                  }
                ]
              },
              "system_loss_fraction": {
                "title": "System Loss Fraction",
                "description": "A number between 0 and 1 for the fraction of the electricity output lost due to factors other than EPW weather conditions, panel efficiency/type, active area, mounting, and inverter conversion from DC to AC. Factors that should be accounted for in this input include soiling, snow, wiring losses, electrical connection losses, manufacturer defects/tolerances/mismatch in cell characteristics, losses from power grid availability, and losses due to age or light-induced degradation. Losses from these factors tend to be between 10-20% but can vary widely depending on the installation, maintenance and the grid to which the panels are connected..",
                "default": 0.14,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "PVProperties",
        "description": "Base class for all objects requiring a valid EnergyPlus identifier.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ShadeEnergyPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ShadeEnergyPropertiesAbridged",
                "pattern": "^ShadeEnergyPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "construction": {
                "title": "Construction",
                "description": "Identifier of a ShadeConstruction to set the reflectance and specularity of the Shade. If None, the construction is set by theparent Room construction_set, the Model global_construction_set or (in the case fo an orphaned shade) the EnergyPlus default of 0.2 diffuse reflectance.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "transmittance_schedule": {
                "title": "Transmittance Schedule",
                "description": "Identifier of a schedule to set the transmittance of the shade, which can vary throughout the simulation. If None, the shade will be completely opaque.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "pv_properties": {
                "title": "Pv Properties",
                "description": "An optional PVProperties object to specify photovoltaic behavior of the Shade. If None, the Shade will have no Photovoltaic properties. Note that the normal of the Shade is important in determining the performance of the shade as a PV geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PVProperties"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ShadeEnergyPropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "StateGeometryAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdRadianceBaseModel"
          },
          {
            "type": "object",
            "required": [
              "geometry"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "A ladybug_geometry Face3D.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "StateGeometryAbridged",
                "pattern": "^StateGeometryAbridged$",
                "type": "string",
                "readOnly": true
              },
              "modifier": {
                "title": "Modifier",
                "description": "A string for a Honeybee Radiance Modifier identifier (default: None).",
                "type": "string"
              },
              "modifier_direct": {
                "title": "Modifier Direct",
                "description": "A string for Honeybee Radiance Modifier identifiers to be used in direct solar simulations and in isolation studies (assessingthe contribution of individual objects) (default: None).",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "StateGeometryAbridged",
        "description": "A single planar geometry that can be assigned to Radiance states.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RadianceShadeStateAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "RadianceShadeStateAbridged",
                "pattern": "^RadianceShadeStateAbridged$",
                "type": "string",
                "readOnly": true
              },
              "modifier": {
                "title": "Modifier",
                "description": "A Radiance Modifier identifier (default: None).",
                "type": "string"
              },
              "modifier_direct": {
                "title": "Modifier Direct",
                "description": "A Radiance Modifier identifier (default: None).",
                "type": "string"
              },
              "shades": {
                "title": "Shades",
                "description": "A list of StateGeometryAbridged objects (default: None).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StateGeometryAbridged"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RadianceShadeStateAbridged",
        "description": "RadianceShadeStateAbridged represents a single state for a dynamic Shade.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ShadeRadiancePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_PropertiesBaseAbridged"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ShadeRadiancePropertiesAbridged",
                "pattern": "^ShadeRadiancePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "dynamic_group_identifier": {
                "title": "Dynamic Group Identifier",
                "description": "An optional string to note the dynamic group '             'to which the Shade is a part of. Shades sharing the same '             'dynamic_group_identifier will have their states change in unison. '             'If None, the Shade is assumed to be static. (default: None).",
                "type": "string"
              },
              "states": {
                "title": "States",
                "description": "An optional list of abridged states (default: None).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RadianceShadeStateAbridged"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ShadeRadiancePropertiesAbridged",
        "description": "Radiance Properties for Honeybee Shade Abridged.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ShadePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ShadePropertiesAbridged",
                "pattern": "^ShadePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "energy": {
                "$ref": "#/components/schemas/ShadeEnergyPropertiesAbridged"
              },
              "radiance": {
                "$ref": "#/components/schemas/ShadeRadiancePropertiesAbridged"
              }
            }
          }
        ],
        "title": "ShadePropertiesAbridged",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Shade": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdBaseModel"
          },
          {
            "type": "object",
            "required": [
              "geometry",
              "properties"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "Planar Face3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "properties": {
                "title": "Properties",
                "description": "Extension properties for particular simulation engines (Radiance, EnergyPlus).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ShadePropertiesAbridged"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "Shade",
                "pattern": "^Shade$",
                "type": "string",
                "readOnly": true
              },
              "is_detached": {
                "title": "Is Detached",
                "description": "Boolean to note whether this shade is detached from any of the other geometry in the model. Cases where this should be True include shade representing surrounding buildings or context. Note that this should always be False for shades assigned to parent objects.",
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Shade",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VentilationOpening": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "VentilationOpening",
                "pattern": "^VentilationOpening$",
                "type": "string",
                "readOnly": true
              },
              "fraction_area_operable": {
                "title": "Fraction Area Operable",
                "description": "A number for the fraction of the window area that is operable.",
                "default": 0.5,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "fraction_height_operable": {
                "title": "Fraction Height Operable",
                "description": "A number for the fraction of the distance from the bottom of the window to the top that is operable",
                "default": 1.0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "discharge_coefficient": {
                "title": "Discharge Coefficient",
                "description": "A number that will be multiplied by the area of the window in the stack (buoyancy-driven) part of the equation to account for additional friction from window geometry, insect screens, etc. Typical values include 0.45, for unobstructed windows WITH insect screens and 0.65 for unobstructed windows WITHOUT insect screens. This value should be lowered if windows are of an awning or casement type and are not allowed to fully open.",
                "default": 0.45,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "wind_cross_vent": {
                "title": "Wind Cross Vent",
                "description": "Boolean to indicate if there is an opening of roughly equal area on the opposite side of the Room such that wind-driven cross ventilation will be induced. If False, the assumption is that the operable area is primarily on one side of the Room and there is no wind-driven ventilation.",
                "default": false,
                "type": "boolean"
              },
              "flow_coefficient_closed": {
                "title": "Flow Coefficient Closed",
                "description": "An optional number in kg/s-m, at 1 Pa per meter of crack length, used to calculate the mass flow rate when the opening is closed; required to run an AirflowNetwork simulation. The DesignBuilder Cracks template defines the flow coefficient for a tight, low-leakage closed external window to be 0.00001, and the flow coefficient for a very poor, high-leakage closed external window to be 0.003.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "flow_exponent_closed": {
                "title": "Flow Exponent Closed",
                "description": "An optional dimensionless number between 0.5 and 1 used to calculate the mass flow rate when the opening is closed; required to run an AirflowNetwork simulation. This value represents the leak geometry impact on airflow, with 0.5 generally corresponding to turbulent orifice flow and 1 generally corresponding to laminar flow. The default of 0.65 is representative of many cases of wall and window leakage, used when the exponent cannot be measured.",
                "default": 0.65,
                "minimum": 0.5,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "two_way_threshold": {
                "title": "Two Way Threshold",
                "description": "A number in kg/m3 indicating the minimum density difference above which two-way flow may occur due to stack effect, required to run an AirflowNetwork simulation. This value is required because the air density difference between two zones (which drives two-way air flow) will tend towards division by zero errors as the air density difference approaches zero. The default of 0.0001 is a typical default value used for AirflowNetwork openings.",
                "default": 0.0001,
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "VentilationOpening",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApertureEnergyPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ApertureEnergyPropertiesAbridged",
                "pattern": "^ApertureEnergyPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "construction": {
                "title": "Construction",
                "description": "Identifier of a WindowConstruction for the aperture. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "vent_opening": {
                "title": "Vent Opening",
                "description": "An optional VentilationOpening to specify the operable portion of the Aperture.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationOpening"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ApertureEnergyPropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RadianceSubFaceStateAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RadianceShadeStateAbridged"
          },
          {
            "type": "object",
            "properties": {
              "vmtx_geometry": {
                "title": "Vmtx Geometry",
                "description": "A Face3D for the view matrix geometry (default: None).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "dmtx_geometry": {
                "title": "Dmtx Geometry",
                "description": "A Face3D for the daylight matrix geometry (default: None).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "RadianceSubFaceStateAbridged",
                "pattern": "^RadianceSubFaceStateAbridged$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RadianceSubFaceStateAbridged",
        "description": "RadianceSubFaceStateAbridged is an abridged state for a dynamic Aperture or Door.\n    ",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApertureRadiancePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_PropertiesBaseAbridged"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ApertureRadiancePropertiesAbridged",
                "pattern": "^ApertureRadiancePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "dynamic_group_identifier": {
                "title": "Dynamic Group Identifier",
                "description": "An optional string to note the dynamic group '             'to which the Aperture is a part of. Apertures sharing the same '             'dynamic_group_identifier will have their states change in unison. '             'If None, the Aperture is assumed to be static. (default: None).",
                "type": "string"
              },
              "states": {
                "title": "States",
                "description": "An optional list of abridged states (default: None).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RadianceSubFaceStateAbridged"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ApertureRadiancePropertiesAbridged",
        "description": "Radiance Properties for Honeybee Aperture Abridged.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AperturePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "AperturePropertiesAbridged",
                "pattern": "^AperturePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "energy": {
                "$ref": "#/components/schemas/ApertureEnergyPropertiesAbridged"
              },
              "radiance": {
                "$ref": "#/components/schemas/ApertureRadiancePropertiesAbridged"
              }
            }
          }
        ],
        "title": "AperturePropertiesAbridged",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Aperture": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdBaseModel"
          },
          {
            "type": "object",
            "required": [
              "geometry",
              "boundary_condition",
              "properties"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "Planar Face3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "boundary_condition": {
                "title": "Boundary Condition",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Outdoors"
                  },
                  {
                    "$ref": "#/components/schemas/Surface"
                  }
                ]
              },
              "properties": {
                "title": "Properties",
                "description": "Extension properties for particular simulation engines (Radiance, EnergyPlus).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AperturePropertiesAbridged"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "Aperture",
                "pattern": "^Aperture$",
                "type": "string",
                "readOnly": true
              },
              "is_operable": {
                "title": "Is Operable",
                "description": "Boolean to note whether the Aperture can be opened for ventilation.",
                "default": false,
                "type": "boolean"
              },
              "indoor_shades": {
                "title": "Indoor Shades",
                "description": "Shades assigned to the interior side of this object (eg. window sill, light shelf).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              },
              "outdoor_shades": {
                "title": "Outdoor Shades",
                "description": "Shades assigned to the exterior side of this object (eg. mullions, louvers).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Aperture",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AFNCrack": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "flow_coefficient": {
                "title": "Flow Coefficient",
                "description": "A number in kg/s-m at 1 Pa per meter of crack length at the conditions defined in the ReferenceCrack condition; required to run an AirflowNetwork simulation. The DesignBuilder Cracks template defines the flow coefficient for a tight, low-leakage wall to be 0.00001 and 0.001 for external and internal constructions, respectively. Flow coefficients for a very poor, high-leakage wall are defined to be 0.0004 and 0.019 for external and internal constructions, respectively.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "AFNCrack",
                "pattern": "^AFNCrack$",
                "type": "string",
                "readOnly": true
              },
              "flow_exponent": {
                "title": "Flow Exponent",
                "description": "An optional dimensionless number between 0.5 and 1 used to calculate the crack mass flow rate; required to run an AirflowNetwork simulation. This value represents the leak geometry impact on airflow, with 0.5 generally corresponding to turbulent orifice flow and 1 generally corresponding to laminar flow. The default of 0.65 is representative of many cases of wall and window leakage, used when the exponent cannot be measured.",
                "default": 0.65,
                "minimum": 0.5,
                "maximum": 1,
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "flow_coefficient"
            ],
            "additionalProperties": false
          }
        ],
        "title": "AFNCrack",
        "description": "Properties for airflow through a crack.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FaceEnergyPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "FaceEnergyPropertiesAbridged",
                "pattern": "^FaceEnergyPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "construction": {
                "title": "Construction",
                "description": "Identifier of an OpaqueConstruction for the Face. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "vent_crack": {
                "title": "Vent Crack",
                "description": "An optional AFNCrack to specify airflow through a surface crack used by the AirflowNetwork.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AFNCrack"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "FaceEnergyPropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomGeometrySource": {
        "title": "RoomGeometrySource",
        "description": "Geometry source options for creating PO rooms.",
        "enum": [
          "Room",
          "Space",
          "Area"
        ]
      },
      "ElementInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "identifier": {
                "title": "Identifier",
                "description": "The Revit element unit identifier.",
                "type": "string",
                "format": "uuid4"
              },
              "geometry_source": {
                "description": "Revit element type. e.g. room, space or area.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoomGeometrySource"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "ElementInfo",
                "type": "string",
                "pattern": "^ElementInfo$",
                "readOnly": true
              }
            },
            "required": [
              "identifier",
              "geometry_source"
            ]
          }
        ],
        "title": "ElementInfo",
        "description": "The information of the Revit Element that corresponds\nto the Pollination element in the Model Editor.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FuelTypes": {
        "title": "FuelTypes",
        "description": "Designates the acceptable fuel types for process loads.",
        "enum": [
          "Electricity",
          "NaturalGas",
          "Propane",
          "FuelOilNo1",
          "FuelOilNo2",
          "Diesel",
          "Gasoline",
          "Coal",
          "Steam",
          "DistrictHeating",
          "DistrictCooling",
          "OtherFuel1",
          "OtherFuel2",
          "None"
        ],
        "type": "string"
      },
      "ProcessAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "watts",
              "schedule",
              "fuel_type"
            ],
            "properties": {
              "watts": {
                "title": "Watts",
                "description": "A number for the process load power in Watts.",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the use of the process over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts to yield a complete equipment profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "fuel_type": {
                "description": "Text to denote the type of fuel consumed by the process. Using the \"None\" type indicates that no end uses will be associated with the process, only the zone gains.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FuelTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "ProcessAbridged",
                "pattern": "^ProcessAbridged$",
                "type": "string",
                "readOnly": true
              },
              "end_use_category": {
                "title": "End Use Category",
                "description": "Text to indicate the end-use subcategory, which will identify the process load in the end use output. For example, \u201cCooking\u201d, \u201cClothes Drying\u201d, etc. A new meter for reporting is created for each unique subcategory.",
                "default": "Process",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "radiant_fraction": {
                "title": "Radiant Fraction",
                "description": "Number for the amount of long-wave radiation heat given off by the process load. Default value is 0.",
                "default": 0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "latent_fraction": {
                "title": "Latent Fraction",
                "description": "Number for the amount of latent heat given off by the process load. Default value is 0.",
                "default": 0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "lost_fraction": {
                "title": "Lost Fraction",
                "description": "Number for the amount of \u201clost\u201d heat being given off by the process load. The default value is 0.",
                "default": 0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ProcessAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "OtherSideTemperature": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "OtherSideTemperature",
                "pattern": "^OtherSideTemperature$",
                "type": "string",
                "readOnly": true
              },
              "heat_transfer_coefficient": {
                "title": "Heat Transfer Coefficient",
                "description": "A value in W/m2-K to indicate the combined convective/radiative film coefficient. If equal to 0, then the specified temperature above is equal to the exterior surface temperature. Otherwise, the temperature above is considered the outside air temperature and this coefficient is used to determine the difference between this outside air temperature and the exterior surface temperature.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "temperature": {
                "title": "Temperature",
                "description": "A temperature value in Celsius to note the temperature on the other side of the object. This input can also be an Autocalculate object to signify that the temperature is equal to the outdoor air temperature.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "OtherSideTemperature",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomRadiancePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "RoomRadiancePropertiesAbridged",
                "pattern": "^RoomRadiancePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "modifier_set": {
                "title": "Modifier Set",
                "description": "An identifier for a unique Room-Assigned ModifierSet (default: None).",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RoomRadiancePropertiesAbridged",
        "description": "Abridged Radiance Properties for Honeybee Room.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DoorEnergyPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "DoorEnergyPropertiesAbridged",
                "pattern": "^DoorEnergyPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "construction": {
                "title": "Construction",
                "description": "Identifier of an OpaqueConstruction or WindowConstruction for the door. Note that the host door must have the is_glass property set to True to assign a WindowConstruction. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "vent_opening": {
                "title": "Vent Opening",
                "description": "An optional VentilationOpening to specify the operable portion of the Door.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationOpening"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DoorEnergyPropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Ground": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Ground",
                "pattern": "^Ground$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Ground",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Adiabatic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Adiabatic",
                "pattern": "^Adiabatic$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Adiabatic",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SingleWindow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_WindowParameterBase"
          },
          {
            "type": "object",
            "required": [
              "width",
              "height"
            ],
            "properties": {
              "width": {
                "title": "Width",
                "description": "A number for the window width. Note that, if this width is applied to a wall that is too narrow for this width, the generated window will automatically be shortened when it is applied to the wall. In this way, setting the width to be `float(\"inf\")` will create parameters that always generate a ribbon window.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "height": {
                "title": "Height",
                "description": "A number for the window height. Note that, if this height is applied to a wall that is too short for this height, the generated window will automatically be shortened when it is applied to the wall.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "SingleWindow",
                "pattern": "^SingleWindow$",
                "type": "string",
                "readOnly": true
              },
              "sill_height": {
                "title": "Sill Height",
                "description": "A number for the window sill height.",
                "default": 1.0,
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "SingleWindow",
        "description": "A single window in the wall center defined by a width * height.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SimpleWindowArea": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_WindowParameterBase"
          },
          {
            "type": "object",
            "required": [
              "window_area"
            ],
            "properties": {
              "window_area": {
                "title": "Window Area",
                "description": "A number for the window area in current model units. If this area is larger than the area of the Wall that it is appliedto, the window will fill the parent Wall at a 99 percent ratio.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "SimpleWindowArea",
                "pattern": "^SimpleWindowArea$",
                "type": "string",
                "readOnly": true
              },
              "rect_split": {
                "title": "Rect Split",
                "description": "Boolean to note whether rectangular portions of base Face should be extracted before scaling them to create apertures. For pentagonal gabled geometries, this results in one rectangle and one triangle, which can often look more realistic and is a better input for engines like EnergyPlus that cannot model windows with more than 4 vertices. However, if a single pentagonal window is desired for such a gabled shape, this input can be set to False to produce such a result.",
                "default": true,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "SimpleWindowArea",
        "description": "A single window defined by an absolute area.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SimpleWindowRatio": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_WindowParameterBase"
          },
          {
            "type": "object",
            "required": [
              "window_ratio"
            ],
            "properties": {
              "window_ratio": {
                "title": "Window Ratio",
                "description": "A number between 0 and 1 for the ratio between the window area and the parent wall surface area.",
                "exclusiveMinimum": 0,
                "exclusiveMaximum": 1,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "SimpleWindowRatio",
                "pattern": "^SimpleWindowRatio$",
                "type": "string",
                "readOnly": true
              },
              "rect_split": {
                "title": "Rect Split",
                "description": "Boolean to note whether rectangular portions of base Face should be extracted before scaling them to create apertures. For pentagonal gabled geometries, this results in one rectangle and one triangle, which can often look more realistic and is a better input for engines like EnergyPlus that cannot model windows with more than 4 vertices. However, if a single pentagonal window is desired for such a gabled shape, this input can be set to False to produce such a result.",
                "default": true,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "SimpleWindowRatio",
        "description": "A single window defined by an area ratio with the base surface.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RepeatingWindowRatio": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_WindowParameterBase"
          },
          {
            "type": "object",
            "required": [
              "window_ratio",
              "window_height",
              "sill_height",
              "horizontal_separation"
            ],
            "properties": {
              "window_ratio": {
                "title": "Window Ratio",
                "description": "A number between 0 and 1 for the ratio between the window area and the parent wall surface area.",
                "exclusiveMinimum": 0,
                "exclusiveMaximum": 0.95,
                "type": "number",
                "format": "double"
              },
              "window_height": {
                "title": "Window Height",
                "description": "A number for the target height of the windows. Note that, if the window ratio is too large for the height, the ratio will take precedence and the actual window_height will be larger than this value.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "sill_height": {
                "title": "Sill Height",
                "description": "A number for the target height above the bottom edge of the wall to start the windows. Note that, if the ratio is too large for the height, the ratio will take precedence and the sill_height will be smaller than this value.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "horizontal_separation": {
                "title": "Horizontal Separation",
                "description": "A number for the target separation between individual window centerlines.  If this number is larger than the parent rectangle base, only one window will be produced.",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "RepeatingWindowRatio",
                "pattern": "^RepeatingWindowRatio$",
                "type": "string",
                "readOnly": true
              },
              "vertical_separation": {
                "title": "Vertical Separation",
                "description": "An optional number to create a single vertical separation between top and bottom windows.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RepeatingWindowRatio",
        "description": "Repeating windows derived from an area ratio with the base wall.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RectangularWindows": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_WindowParameterBase"
          },
          {
            "type": "object",
            "required": [
              "origins",
              "widths",
              "heights"
            ],
            "properties": {
              "origins": {
                "title": "Origins",
                "description": "An array of 2D points within the plane of the wall for the origin of each window. Each point should be a list of 2 (x, y) values. The wall plane is assumed to have an origin at the first point of the wall segment and an X-axis extending along the length of the segment. The wall plane Y-axis always points upwards. Therefore, both X and Y values of each origin point should be positive.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "exclusiveMinimum": 0,
                    "format": "double"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "widths": {
                "title": "Widths",
                "description": "An array of positive numbers for the window widths. The length of this list must match the length of the origins.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "number",
                  "exclusiveMinimum": 0,
                  "format": "double"
                }
              },
              "heights": {
                "title": "Heights",
                "description": "An array of positive numbers for the window heights. The length of this list must match the length of the origins.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "number",
                  "exclusiveMinimum": 0,
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "RectangularWindows",
                "pattern": "^RectangularWindows$",
                "type": "string",
                "readOnly": true
              },
              "are_doors": {
                "title": "Are Doors",
                "description": "An array of booleans that align with the origins and note whether each of the geometries represents a door (True) or a window (False). If None, it will be assumed that all geometries represent windows and they will be translated to Apertures in any resulting Honeybee model.",
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RectangularWindows",
        "description": "Several rectangular windows, defined by origin, width and height.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DetailedWindows": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_WindowParameterBase"
          },
          {
            "type": "object",
            "required": [
              "polygons"
            ],
            "properties": {
              "polygons": {
                "title": "Polygons",
                "description": "An array of arrays with each sub-array representing a polygonal boundary of a window. Each sub-array should consist of arrays representing points, which can either contain 2 values (indicating they are 2D vertices within the plane of a parent wall segment) or they can contain 3 values (indicating they are 3D world coordinates). For 2D points, the wall plane is assumed to have an origin at the first point of the wall segment and an X-axis extending along the length of the segment. The wall plane Y-axis always points upwards. Therefore, both X and Y values of each point in the polygon should always be positive. Some sample code to convert from 2D vertices to 2D vertices in the plane of the wall can be found here: https://www.ladybug.tools/dragonfly-core/docs/dragonfly.windowparameter.html#dragonfly.windowparameter.DetailedWindows",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "exclusiveMinimum": 0,
                      "format": "double"
                    },
                    "minItems": 2,
                    "maxItems": 3
                  },
                  "minItems": 3
                }
              },
              "type": {
                "title": "Type",
                "default": "DetailedWindows",
                "pattern": "^DetailedWindows$",
                "type": "string",
                "readOnly": true
              },
              "are_doors": {
                "title": "Are Doors",
                "description": "An array of booleans that align with the polygons and note whether each of the polygons represents a door (True) or a window (False). If None, it will be assumed that all polygons represent windows and they will be translated to Apertures in any resulting Honeybee model.",
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DetailedWindows",
        "description": "Several detailed windows defined by 2D Polygons (lists of 2D vertices).",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ExtrudedBorder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "depth": {
                "title": "Depth",
                "description": "A number for the depth of the border.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "ExtrudedBorder",
                "pattern": "^ExtrudedBorder$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "depth"
            ],
            "additionalProperties": false
          }
        ],
        "title": "ExtrudedBorder",
        "description": "Extruded borders over all windows in the wall.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Overhang": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "depth": {
                "title": "Depth",
                "description": "A number for the overhang depth.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Overhang",
                "pattern": "^Overhang$",
                "type": "string",
                "readOnly": true
              },
              "angle": {
                "title": "Angle",
                "description": "A number between -90 and 90 for the for an angle to rotate the overhang in degrees. 0 indicates an overhang perpendicular to the wall. Positive values indicate a downward rotation. Negative values indicate an upward rotation.",
                "default": 0,
                "minimum": -90,
                "maximum": 90,
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "depth"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Overhang",
        "description": "A single overhang over an entire wall.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LouversByDistance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_LouversBase"
          },
          {
            "type": "object",
            "required": [
              "distance"
            ],
            "properties": {
              "distance": {
                "title": "Distance",
                "description": "A number for the approximate distance between each louver.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "LouversByDistance",
                "pattern": "^LouversByDistance$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "LouversByDistance",
        "description": "A series of louvered Shades at a given distance between each louver.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LouversByCount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_LouversBase"
          },
          {
            "type": "object",
            "required": [
              "louver_count"
            ],
            "properties": {
              "louver_count": {
                "title": "Louver Count",
                "description": "A positive integer for the number of louvers to generate.",
                "exclusiveMinimum": 0,
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "title": "Type",
                "default": "LouversByCount",
                "pattern": "^LouversByCount$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "LouversByCount",
        "description": "A specific number of louvered Shades over a wall.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GriddedSkylightArea": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "skylight_area": {
                "title": "Skylight Area",
                "description": "A number for the skylight area in current model units. If this area is larger than the area of the roof that it is applied to, the skylight will fill the parent roof at a 99 percent ratio.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "GriddedSkylightArea",
                "pattern": "^GriddedSkylightArea$",
                "type": "string",
                "readOnly": true
              },
              "spacing": {
                "title": "Spacing",
                "description": "A number for the spacing between the centers of each grid cell. This should be less than a third of the dimension of the Roof geometry if multiple, evenly-spaced skylights are desired. If Autocalculate, a spacing of one third the smaller dimension of the parent Roof will be automatically assumed.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "exclusiveMinimum": 0
                  }
                ]
              }
            },
            "required": [
              "skylight_area"
            ],
            "additionalProperties": false
          }
        ],
        "title": "GriddedSkylightArea",
        "description": "Gridded skylights defined by an absolute area.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GriddedSkylightRatio": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "skylight_ratio": {
                "title": "Skylight Ratio",
                "description": "A number between 0 and 1 for the ratio between the skylight area and the total Roof face area.",
                "exclusiveMinimum": 0,
                "exclusiveMaximum": 1,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "GriddedSkylightRatio",
                "pattern": "^GriddedSkylightRatio$",
                "type": "string",
                "readOnly": true
              },
              "spacing": {
                "title": "Spacing",
                "description": "A number for the spacing between the centers of each grid cell. This should be less than a third of the dimension of the Roof geometry if multiple, evenly-spaced skylights are desired. If Autocalculate, a spacing of one third the smaller dimension of the parent Roof will be automatically assumed.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "exclusiveMinimum": 0
                  }
                ]
              }
            },
            "required": [
              "skylight_ratio"
            ],
            "additionalProperties": false
          }
        ],
        "title": "GriddedSkylightRatio",
        "description": "Gridded skylights derived from an area ratio with the roof.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DetailedSkylights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "polygons": {
                "title": "Polygons",
                "description": "An array of arrays with each sub-array representing a polygonal boundary of a skylight. Each sub-array should consist of arrays representing points, which contain 2 values for 2D coordinates in the world XY system. These coordinate values should lie within the parent Room2D Polygon.",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  },
                  "minItems": 3
                }
              },
              "type": {
                "title": "Type",
                "default": "DetailedSkylights",
                "pattern": "^DetailedSkylights$",
                "type": "string",
                "readOnly": true
              },
              "are_doors": {
                "title": "Are Doors",
                "description": "An array of booleans that align with the polygons and note whether each of the polygons represents an overhead door (True) or a skylight (False). If None, it will be assumed that all polygons represent skylights and they will be translated to Apertures in any resulting Honeybee model.",
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            },
            "required": [
              "polygons"
            ],
            "additionalProperties": false
          }
        ],
        "title": "DetailedSkylights",
        "description": "Several detailed skylights defined by 2D Polygons (lists of 2D vertices).",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VentilationControlAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "VentilationControlAbridged",
                "pattern": "^VentilationControlAbridged$",
                "type": "string",
                "readOnly": true
              },
              "min_indoor_temperature": {
                "title": "Min Indoor Temperature",
                "description": "A number for the minimum indoor temperature at which to ventilate in Celsius. Typically, this variable is used to initiate ventilation.",
                "default": -100,
                "minimum": -100,
                "maximum": 100,
                "type": "number",
                "format": "double"
              },
              "max_indoor_temperature": {
                "title": "Max Indoor Temperature",
                "description": "A number for the maximum indoor temperature at which to ventilate in Celsius. This can be used to set a maximum temperature at which point ventilation is stopped and a cooling system is turned on.",
                "default": 100,
                "minimum": -100,
                "maximum": 100,
                "type": "number",
                "format": "double"
              },
              "min_outdoor_temperature": {
                "title": "Min Outdoor Temperature",
                "description": "A number for the minimum outdoor temperature at which to ventilate in Celsius. This can be used to ensure ventilative cooling does not happen during the winter even if the Room is above the min_indoor_temperature.",
                "default": -100,
                "minimum": -100,
                "maximum": 100,
                "type": "number",
                "format": "double"
              },
              "max_outdoor_temperature": {
                "title": "Max Outdoor Temperature",
                "description": "A number for the maximum indoor temperature at which to ventilate in Celsius. This can be used to set a limit for when it is considered too hot outside for ventilative cooling.",
                "default": 100,
                "minimum": -100,
                "maximum": 100,
                "type": "number",
                "format": "double"
              },
              "delta_temperature": {
                "title": "Delta Temperature",
                "description": "A number for the temperature differential in Celsius between indoor and outdoor below which ventilation is shut off.  This should usually be a positive number so that ventilation only occurs when the outdoors is cooler than the indoors. Negative numbers indicate how much hotter the outdoors can be than the indoors before ventilation is stopped.",
                "default": -100,
                "minimum": -100,
                "maximum": 100,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the ventilation over the course of the year. Note that this is applied on top of any setpoints. The type of this schedule should be On/Off and values should be either 0 (no possibility of ventilation) or 1 (ventilation possible).",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "VentilationControlAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Room2DEnergyPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Room2DEnergyPropertiesAbridged",
                "pattern": "^Room2DEnergyPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "construction_set": {
                "title": "Construction Set",
                "description": "Name of a ConstructionSet to specify all constructions for the Room2D. If None, the Room2D will use the Story or Building construction_set or the Model global_construction_set. Any ConstructionSet assigned here will override those assigned to these objects.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "program_type": {
                "title": "Program Type",
                "description": "Name of a ProgramType to specify all schedules and loads for the Room2D. If None, the Room2D will have no loads or setpoints.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "hvac": {
                "title": "Hvac",
                "description": "An optional identifier of a HVAC system (such as an IdealAirSystem) that specifies how the Room2D is conditioned. If None, it will be assumed that the Room2D is not conditioned.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "shw": {
                "title": "Shw",
                "description": "An optional identifier of a Service Hot Water (SHW) system that specifies how the hot water load of the Room is met. If None, the hot water load will be met with a generic system that only measures thermal loadand does not account for system efficiencies.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "window_vent_control": {
                "title": "Window Vent Control",
                "description": "An optional VentilationControl object to dictate the opening of windows. If None, the windows will never open.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationControlAbridged"
                  }
                ]
              },
              "window_vent_opening": {
                "title": "Window Vent Opening",
                "description": "An optional VentilationOpening to specify the operable portion of all windows of the Room2D. If None, the windows will never open.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationOpening"
                  }
                ]
              },
              "process_loads": {
                "title": "Process Loads",
                "description": "An optional list of Process objects for process loads within the room. These can represent wood burning fireplaces, kilns, manufacturing equipment, and various industrial processes. They can also be used to represent certain pieces of equipment to be separated from the other end uses, such as MRI machines, theatrical lighting, and elevators.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProcessAbridged"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Room2DEnergyPropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomGridParameter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_GridParameterBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "RoomGridParameter",
                "pattern": "^RoomGridParameter$",
                "type": "string",
                "readOnly": true
              },
              "offset": {
                "title": "Offset",
                "description": "A number for how far to offset the grid from the Room2D floors. (Default: 1.0, suitable for Models in Meters).",
                "default": 1.0,
                "type": "number",
                "format": "double"
              },
              "wall_offset": {
                "title": "Wall Offset",
                "description": "A number for the distance at which sensors close to walls should be removed. Note that this option has no effect unless the value is more than half of the dimension.",
                "default": 0,
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RoomGridParameter",
        "description": "Instructions for a SensorGrid generated from a Room2D's floors.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomRadialGridParameter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomGridParameter"
          },
          {
            "type": "object",
            "properties": {
              "dir_count": {
                "title": "Dir Count",
                "description": "A positive integer for the number of radial directions to be generated around each position.",
                "default": 8,
                "exclusiveMinimum": 0,
                "type": "integer",
                "format": "int32"
              },
              "start_vector": {
                "title": "Start Vector",
                "description": "A vector as 3 (x, y, z) values to set the start direction of the generated directions. This can be used to orient the resulting sensors to specific parts of the scene. It can also change the elevation of the resulting directions since this start vector will always be rotated in the XY plane to generate the resulting directions.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "mesh_radius": {
                "title": "Mesh Radius",
                "description": "An optional number to override the radius of the meshes generated around each sensor. If Autocalculate, it will be equal to 45 percent of the grid dimension.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "RoomRadialGridParameter",
                "pattern": "^RoomRadialGridParameter$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RoomRadialGridParameter",
        "description": "Instructions for a SensorGrid of radial directions around positions from floors.\n\nThis type of sensor grid is particularly helpful for studies of multiple\nview directions, such as imageless glare studies.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ExteriorFaceType": {
        "title": "ExteriorFaceType",
        "description": "An enumeration.",
        "enum": [
          "Wall",
          "Roof",
          "Floor",
          "All"
        ],
        "type": "string"
      },
      "ExteriorFaceGridParameter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_GridParameterBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ExteriorFaceGridParameter",
                "pattern": "^ExteriorFaceGridParameter$",
                "type": "string",
                "readOnly": true
              },
              "offset": {
                "title": "Offset",
                "description": "A number for how far to offset the grid from the Faces. (Default: 0.1, suitable for Models in Meters).",
                "default": 0.1,
                "type": "number",
                "format": "double"
              },
              "face_type": {
                "description": "Text to specify the type of face that will be used to generate grids. Note that only Faces with Outdoors boundary conditions will be used, meaning that most Floors will typically be excluded unless they represent the underside of a cantilever.",
                "default": "Wall",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExteriorFaceType"
                  }
                ]
              },
              "punched_geometry": {
                "title": "Punched Geometry",
                "description": "A boolean to note whether the punched_geometry of the faces should be used (True) with the areas of sub-faces removed from the grid or the full geometry should be used (False).",
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ExteriorFaceGridParameter",
        "description": "Instructions for a SensorGrid generated from exterior Faces.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ExteriorApertureType": {
        "title": "ExteriorApertureType",
        "description": "An enumeration.",
        "enum": [
          "Window",
          "Skylight",
          "All"
        ],
        "type": "string"
      },
      "ExteriorApertureGridParameter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_GridParameterBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ExteriorApertureGridParameter",
                "pattern": "^ExteriorApertureGridParameter$",
                "type": "string",
                "readOnly": true
              },
              "offset": {
                "title": "Offset",
                "description": "A number for how far to offset the grid from the Apertures. (Default: 0.1, suitable for Models in Meters).",
                "default": 0.1,
                "type": "number",
                "format": "double"
              },
              "aperture_type": {
                "description": "Text to specify the type of Aperture that will be used to generate grids. Window indicates Apertures in Walls. Skylights are in parent Roof faces.",
                "default": "All",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExteriorApertureType"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ExteriorApertureGridParameter",
        "description": "Instructions for a SensorGrid generated from exterior Aperture.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Room2DRadiancePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Room2DRadiancePropertiesAbridged",
                "pattern": "^Room2DRadiancePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "modifier_set": {
                "title": "Modifier Set",
                "description": "Identifier of a ModifierSet to specify all modifiers for the Room2D. If None, the Room2D will use the Story or Building modifier_set or the Model global_modifier_set. Any ModifierSet assigned here will override those assigned to the parent objects.",
                "type": "string"
              },
              "grid_parameters": {
                "title": "Grid Parameters",
                "description": "An optional list of GridParameter objects to describe how sensor grids should be generated for the Room2D.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/RoomGridParameter"
                    },
                    {
                      "$ref": "#/components/schemas/RoomRadialGridParameter"
                    },
                    {
                      "$ref": "#/components/schemas/ExteriorFaceGridParameter"
                    },
                    {
                      "$ref": "#/components/schemas/ExteriorApertureGridParameter"
                    }
                  ]
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Room2DRadiancePropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Room2DPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Room2DPropertiesAbridged",
                "pattern": "^Room2DPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "energy": {
                "$ref": "#/components/schemas/Room2DEnergyPropertiesAbridged"
              },
              "radiance": {
                "$ref": "#/components/schemas/Room2DRadiancePropertiesAbridged"
              }
            }
          }
        ],
        "title": "Room2DPropertiesAbridged",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Room2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdBaseModel"
          },
          {
            "type": "object",
            "required": [
              "floor_boundary",
              "floor_height",
              "floor_to_ceiling_height",
              "properties"
            ],
            "properties": {
              "floor_boundary": {
                "title": "Floor Boundary",
                "description": "A list of 2D points representing the outer boundary vertices of the Room2D. The list should include at least 3 points and each point should be a list of 2 (x, y) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "floor_height": {
                "title": "Floor Height",
                "description": "A number to indicate the height of the floor plane in the Z axis.",
                "type": "number",
                "format": "double"
              },
              "floor_to_ceiling_height": {
                "title": "Floor To Ceiling Height",
                "description": "A number for the distance between the floor and the ceiling.",
                "type": "number",
                "format": "double"
              },
              "properties": {
                "title": "Properties",
                "description": "Extension properties for particular simulation engines (Radiance, EnergyPlus).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Room2DPropertiesAbridged"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "Room2D",
                "pattern": "^Room2D$",
                "type": "string",
                "readOnly": true
              },
              "floor_holes": {
                "title": "Floor Holes",
                "description": "Optional list of lists with one list for each hole in the floor plate. Each hole should be a list of at least 2 points and each point a list of 2 (x, y) values. If None, it will be assumed that there are no holes in the floor plate.",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  },
                  "minItems": 3
                }
              },
              "is_ground_contact": {
                "title": "Is Ground Contact",
                "description": "A boolean noting whether this Room2D has its floor in contact with the ground.",
                "default": false,
                "type": "boolean"
              },
              "is_top_exposed": {
                "title": "Is Top Exposed",
                "description": "A boolean noting whether this Room2D has its ceiling exposed to the outdoors.",
                "default": false,
                "type": "boolean"
              },
              "boundary_conditions": {
                "title": "Boundary Conditions",
                "description": "A list of boundary conditions that match the number of segments in the input floor_geometry + floor_holes. These will be used to assign boundary conditions to each of the walls of the Room in the resulting model. Their order should align with the order of segments in the floor_boundary and then with each hole segment. If None, all boundary conditions will be Outdoors or Ground depending on whether ceiling height of the room is at or below 0 (the assumed ground plane).",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Ground"
                    },
                    {
                      "$ref": "#/components/schemas/Outdoors"
                    },
                    {
                      "$ref": "#/components/schemas/Surface"
                    },
                    {
                      "$ref": "#/components/schemas/Adiabatic"
                    },
                    {
                      "$ref": "#/components/schemas/OtherSideTemperature"
                    }
                  ]
                }
              },
              "window_parameters": {
                "title": "Window Parameters",
                "description": "A list of WindowParameter objects that dictate how the window geometries will be generated for each of the walls. If None, no windows will exist over the entire Room2D.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/SingleWindow"
                    },
                    {
                      "$ref": "#/components/schemas/SimpleWindowArea"
                    },
                    {
                      "$ref": "#/components/schemas/SimpleWindowRatio"
                    },
                    {
                      "$ref": "#/components/schemas/RepeatingWindowRatio"
                    },
                    {
                      "$ref": "#/components/schemas/RectangularWindows"
                    },
                    {
                      "$ref": "#/components/schemas/DetailedWindows"
                    }
                  ]
                }
              },
              "shading_parameters": {
                "title": "Shading Parameters",
                "description": "A list of ShadingParameter objects that dictate how the shade geometries will be generated for each of the walls. If None, no shades will exist over the entire Room2D.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ExtrudedBorder"
                    },
                    {
                      "$ref": "#/components/schemas/Overhang"
                    },
                    {
                      "$ref": "#/components/schemas/LouversByDistance"
                    },
                    {
                      "$ref": "#/components/schemas/LouversByCount"
                    }
                  ]
                }
              },
              "air_boundaries": {
                "title": "Air Boundaries",
                "description": "A list of booleans for whether each wall has an air boundary type. False values indicate a standard opaque type while True values indicate an AirBoundary type. All walls will be False by default. Note that any walls with a True air boundary must have a Surface boundary condition without any windows.",
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              },
              "skylight_parameters": {
                "title": "Skylight Parameters",
                "description": "A SkylightParameter object describing how to generate skylights. If None, no skylights will exist on the Room2D.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/GriddedSkylightArea"
                  },
                  {
                    "$ref": "#/components/schemas/GriddedSkylightRatio"
                  },
                  {
                    "$ref": "#/components/schemas/DetailedSkylights"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Room2D",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FaceRadiancePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_PropertiesBaseAbridged"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "FaceRadiancePropertiesAbridged",
                "pattern": "^FaceRadiancePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "FaceRadiancePropertiesAbridged",
        "description": "Radiance Properties for Honeybee Face Abridged.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FacePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "FacePropertiesAbridged",
                "pattern": "^FacePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "energy": {
                "$ref": "#/components/schemas/FaceEnergyPropertiesAbridged"
              },
              "radiance": {
                "$ref": "#/components/schemas/FaceRadiancePropertiesAbridged"
              }
            }
          }
        ],
        "title": "FacePropertiesAbridged",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VentilationAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "VentilationAbridged",
                "pattern": "^VentilationAbridged$",
                "type": "string",
                "readOnly": true
              },
              "flow_per_person": {
                "title": "Flow Per Person",
                "description": "Intensity of ventilation in[] m3/s per person]. Note that setting this value does not mean that ventilation is varied based on real-time occupancy but rather that the design level of ventilation is determined using this value and the People object of the Room.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "flow_per_area": {
                "title": "Flow Per Area",
                "description": "Intensity of ventilation in [m3/s per m2 of floor area].",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "air_changes_per_hour": {
                "title": "Air Changes Per Hour",
                "description": "Intensity of ventilation in air changes per hour (ACH) for the entire Room.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "flow_per_zone": {
                "title": "Flow Per Zone",
                "description": "Intensity of ventilation in m3/s for the entire Room.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the ventilation over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the total design flow rate (determined from the sum of the other 4 fields) to yield a complete ventilation profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "VentilationAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DoorRadiancePropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_PropertiesBaseAbridged"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "DoorRadiancePropertiesAbridged",
                "pattern": "^DoorRadiancePropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "dynamic_group_identifier": {
                "title": "Dynamic Group Identifier",
                "description": "An optional string to note the dynamic group '             'to which the Door is a part of. Doors sharing the same '             'dynamic_group_identifier will have their states change in unison. '             'If None, the Door is assumed to be static. (default: None).",
                "type": "string"
              },
              "states": {
                "title": "States",
                "description": "An optional list of abridged states (default: None).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RadianceSubFaceStateAbridged"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DoorRadiancePropertiesAbridged",
        "description": "Radiance Properties for Honeybee Door Abridged.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DoorPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "DoorPropertiesAbridged",
                "pattern": "^DoorPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "energy": {
                "$ref": "#/components/schemas/DoorEnergyPropertiesAbridged"
              },
              "radiance": {
                "$ref": "#/components/schemas/DoorRadiancePropertiesAbridged"
              }
            }
          }
        ],
        "title": "DoorPropertiesAbridged",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Door": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdBaseModel"
          },
          {
            "type": "object",
            "required": [
              "geometry",
              "boundary_condition",
              "properties"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "Planar Face3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "boundary_condition": {
                "title": "Boundary Condition",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Outdoors"
                  },
                  {
                    "$ref": "#/components/schemas/Surface"
                  }
                ]
              },
              "properties": {
                "title": "Properties",
                "description": "Extension properties for particular simulation engines (Radiance, EnergyPlus).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DoorPropertiesAbridged"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "Door",
                "pattern": "^Door$",
                "type": "string",
                "readOnly": true
              },
              "is_glass": {
                "title": "Is Glass",
                "description": "Boolean to note whether this object is a glass door as opposed to an opaque door.",
                "default": false,
                "type": "boolean"
              },
              "indoor_shades": {
                "title": "Indoor Shades",
                "description": "Shades assigned to the interior side of this object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              },
              "outdoor_shades": {
                "title": "Outdoor Shades",
                "description": "Shades assigned to the exterior side of this object (eg. entryway awning).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Door",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomElementInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "identifier",
              "geometry_source"
            ],
            "properties": {
              "identifier": {
                "title": "Identifier",
                "description": "The Revit element unit identifier.",
                "type": "string",
                "format": "uuid4"
              },
              "geometry_source": {
                "description": "Revit element type. e.g. room, space or area.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoomGeometrySource"
                  }
                ]
              },
              "extrusion_height": {
                "title": "Extrusion Height",
                "description": "An extrusion height in Revit document units to overwrite the existing extrusion height. If not provided the extrusion height that is assigned to the room in Revit will be used. If that is not set the extrusion height value from the level will be used.",
                "type": "number",
                "format": "double"
              },
              "elevation": {
                "title": "Elevation",
                "description": "An elevation value if the elevation of the room differs from the level elevation.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "RoomElementInfo",
                "type": "string",
                "pattern": "^RoomElementInfo$",
                "readOnly": true
              }
            }
          }
        ],
        "title": "RoomElementInfo",
        "description": "The information for the Revit element that corresponds\nto the Pollination room, space or area plus the extrusion height\nand the elevation for parsing them from Revit.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PeopleAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "people_per_area",
              "occupancy_schedule"
            ],
            "properties": {
              "people_per_area": {
                "title": "People Per Area",
                "description": "People per floor area expressed as [people/m2]",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "occupancy_schedule": {
                "title": "Occupancy Schedule",
                "description": "Identifier of a schedule for the occupancy over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the people_per_area to yield a complete occupancy profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "PeopleAbridged",
                "pattern": "^PeopleAbridged$",
                "type": "string",
                "readOnly": true
              },
              "activity_schedule": {
                "title": "Activity Schedule",
                "description": "Identifier of a schedule for the activity of the occupants over the course of the year. The type of this schedule should be ActivityLevel and the values of the schedule equal to the number of Watts given off by an individual person in the room. If None, a default constant schedule with 120 Watts per person will be used, which is typical of awake, adult humans who are seated.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "radiant_fraction": {
                "title": "Radiant Fraction",
                "description": "The radiant fraction of sensible heat released by people. (Default: 0.3).",
                "default": 0.3,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "latent_fraction": {
                "title": "Latent Fraction",
                "description": "Number for the latent fraction of heat gain due to people or an Autocalculate object.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "PeopleAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LightingAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "watts_per_area",
              "schedule"
            ],
            "properties": {
              "watts_per_area": {
                "title": "Watts Per Area",
                "description": "Lighting per floor area as [W/m2].",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the use of lights over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete lighting profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "LightingAbridged",
                "pattern": "^LightingAbridged$",
                "type": "string",
                "readOnly": true
              },
              "visible_fraction": {
                "title": "Visible Fraction",
                "description": "The fraction of heat from lights that goes into the zone as visible (short-wave) radiation. (Default: 0.25).",
                "default": 0.25,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "radiant_fraction": {
                "title": "Radiant Fraction",
                "description": "The fraction of heat from lights that is long-wave radiation. (Default: 0.32).",
                "default": 0.32,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "return_air_fraction": {
                "title": "Return Air Fraction",
                "description": "The fraction of the heat from lights that goes into the zone return air. (Default: 0).",
                "default": 0.0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "baseline_watts_per_area": {
                "title": "Baseline Watts Per Area",
                "description": "The baseline lighting power density in [W/m2] of floor area. This baseline is useful to track how much better the installed lights are in comparison to a standard like ASHRAE 90.1. If set to None, it will default to 11.84029 W/m2, which is that ASHRAE 90.1-2004 baseline for an office.",
                "default": 11.84029,
                "minimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "LightingAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ElectricEquipmentAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_EquipmentBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ElectricEquipmentAbridged",
                "pattern": "^ElectricEquipmentAbridged$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ElectricEquipmentAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GasEquipmentAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_EquipmentBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "GasEquipmentAbridged",
                "pattern": "^GasEquipmentAbridged$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "GasEquipmentAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ServiceHotWaterAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "flow_per_area",
              "schedule"
            ],
            "properties": {
              "flow_per_area": {
                "title": "Flow Per Area",
                "description": "Number for the total volume flow rate of water per unit area of floor [L/h-m2].",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the hot water use over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the flow_per_area to yield a complete water usage profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "ServiceHotWaterAbridged",
                "pattern": "^ServiceHotWaterAbridged$",
                "type": "string",
                "readOnly": true
              },
              "target_temperature": {
                "title": "Target Temperature",
                "description": "Number for the target temperature of water out of the tap (C). This the temperature after hot water has been mixed with cold water from the water mains. The default is 60C, which essentially assumes that the flow_per_area on this object is only for water straight out of the water heater.",
                "default": 60,
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "sensible_fraction": {
                "title": "Sensible Fraction",
                "description": "A number between 0 and 1 for the fraction of the total hot water load given off as sensible heat in the zone.",
                "default": 0.2,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "latent_fraction": {
                "title": "Latent Fraction",
                "description": "A number between 0 and 1 for the fraction of the total hot water load that is latent.",
                "default": 0.05,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ServiceHotWaterAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "InfiltrationAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "flow_per_exterior_area",
              "schedule"
            ],
            "properties": {
              "flow_per_exterior_area": {
                "title": "Flow Per Exterior Area",
                "description": "Number for the infiltration per exterior surface area in m3/s-m2.",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the infiltration over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the flow_per_exterior_area to yield a complete infiltration profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "InfiltrationAbridged",
                "pattern": "^InfiltrationAbridged$",
                "type": "string",
                "readOnly": true
              },
              "constant_coefficient": {
                "title": "Constant Coefficient",
                "default": 1,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "temperature_coefficient": {
                "title": "Temperature Coefficient",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "velocity_coefficient": {
                "title": "Velocity Coefficient",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "InfiltrationAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SetpointAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "cooling_schedule",
              "heating_schedule"
            ],
            "properties": {
              "cooling_schedule": {
                "title": "Cooling Schedule",
                "description": "Identifier of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C].",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "heating_schedule": {
                "title": "Heating Schedule",
                "description": "Identifier of the schedule for the heating setpoint. The values in this schedule should be temperature in [C].",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "SetpointAbridged",
                "pattern": "^SetpointAbridged$",
                "type": "string",
                "readOnly": true
              },
              "humidifying_schedule": {
                "title": "Humidifying Schedule",
                "description": "Identifier of the schedule for the humidification setpoint. The values in this schedule should be in [%].",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "dehumidifying_schedule": {
                "title": "Dehumidifying Schedule",
                "description": "Identifier of the schedule for the dehumidification setpoint. The values in this schedule should be in [%].",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "setpoint_cutout_difference": {
                "title": "Setpoint Cutout Difference",
                "description": "An optional positive number for the temperature difference between the cutout temperature and the setpoint temperature. Specifying a non-zero number here is useful for modeling the throttling range associated with a given setup of setpoint controls and HVAC equipment. Throttling ranges describe the range where a zone is slightly over-cooled or over-heated beyond the thermostat setpoint. They are used to avoid situations where HVAC systems turn on only to turn off a few minutes later, thereby wearing out the parts of mechanical systems faster. They can have a minor impact on energy consumption and can often have significant impacts on occupant thermal comfort, though using the default value of zero will often yield results that are close enough when trying to estimate the annual heating/cooling energy use. Specifying a value of zero effectively assumes that the system will turn on whenever conditions are outside the setpoint range and will cut out as soon as the setpoint is reached.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "SetpointAbridged",
        "description": "Used to specify information about the setpoint schedule.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DaylightingControl": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "sensor_position": {
                "title": "Sensor Position",
                "description": "A point as 3 (x, y, z) values for the position of the daylight sensor within the parent Room. This point should lie within the Room volume in order for the results to be meaningful.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "DaylightingControl",
                "pattern": "^DaylightingControl$",
                "type": "string",
                "readOnly": true
              },
              "illuminance_setpoint": {
                "title": "Illuminance Setpoint",
                "description": "A number for the illuminance setpoint in lux beyond which electric lights are dimmed if there is sufficient daylight.",
                "default": 300,
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "control_fraction": {
                "title": "Control Fraction",
                "description": "A number between 0 and 1 that represents the fraction of the Room lights that are dimmed when the illuminance at the sensor position is at the specified illuminance. 1 indicates that all lights are dim-able while 0 indicates that no lights are dim-able. Deeper rooms should have lower control fractions to account for the face that the lights in the back of the space do not dim in response to suitable daylight at the front of the room.",
                "default": 1,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "min_power_input": {
                "title": "Min Power Input",
                "description": "A number between 0 and 1 for the the lowest power the lighting system can dim down to, expressed as a fraction of maximum input power.",
                "default": 0.3,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "min_light_output": {
                "title": "Min Light Output",
                "description": "A number between 0 and 1 the lowest lighting output the lighting system can dim down to, expressed as a fraction of maximum light output.",
                "default": 0.2,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "off_at_minimum": {
                "title": "Off At Minimum",
                "description": "Boolean to note whether lights should switch off completely when they get to the minimum power input.",
                "default": false,
                "type": "boolean"
              }
            },
            "required": [
              "sensor_position"
            ],
            "additionalProperties": false
          }
        ],
        "title": "DaylightingControl",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VentilationType": {
        "title": "VentilationType",
        "description": "An enumeration.",
        "enum": [
          "Exhaust",
          "Intake",
          "Balanced"
        ],
        "type": "string"
      },
      "VentilationFan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "flow_rate",
              "pressure_rise",
              "efficiency"
            ],
            "properties": {
              "flow_rate": {
                "title": "Flow Rate",
                "description": "A number for the flow rate of the fan in m3/s.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "pressure_rise": {
                "title": "Pressure Rise",
                "description": "A number for the the pressure rise across the fan in Pascals (N/m2). This is often a function of the fan speed and the conditions in which the fan is operating since having the fan blow air through filters or narrow ducts will increase the pressure rise that is needed to deliver the input flow rate. The pressure rise plays an important role in determining the amount of energy consumed by the fan. Smaller fans like a 0.05 m3/s desk fan tend to have lower pressure rises around 60 Pa. Larger fans, such as a 6 m3/s fan used for ventilating a large room tend to have higher pressure rises around 400 Pa. The highest pressure rises are typically for large fans blowing air through ducts and filters, which can have pressure rises as high as 1000 Pa.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "efficiency": {
                "title": "Efficiency",
                "description": "A number between 0 and 1 for the overall efficiency of the fan. Specifically, this is the ratio of the power delivered to the fluid to the electrical input power. It is the product of the fan motor efficiency and the fan impeller efficiency. Fans that have a higher blade diameter and operate at lower speeds with smaller pressure rises for their size tend to have higher efficiencies. Because motor efficiencies are typically between 0.8 and 0.9, the best overall fan efficiencies tend to be around 0.7 with most typical fan efficiencies between 0.5 and 0.7. The lowest efficiencies often happen for small fans in situations with high pressure rises for their size, which can result in efficiencies as low as 0.15.",
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "VentilationFan",
                "pattern": "^VentilationFan$",
                "type": "string",
                "readOnly": true
              },
              "ventilation_type": {
                "description": "Text to indicate the type of type of ventilation. Choose from the options below. For either Exhaust or Intake, values for fan pressure and efficiency define the fan electric consumption. For Exhaust ventilation, the conditions of the air entering the space are assumed to be equivalent to outside air conditions. For Intake and Balanced ventilation, an appropriate amount of fan heat is added to the entering air stream. For Balanced ventilation, both an intake fan and an exhaust fan are assumed to co-exist, both having the same flow rate and power consumption (using the entered values for fan pressure rise and fan total efficiency). Thus, the fan electric consumption for Balanced ventilation is twice that for the Exhaust or Intake ventilation types which employ only a single fan.",
                "default": "Balanced",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationType"
                  }
                ]
              },
              "control": {
                "title": "Control",
                "description": "A VentilationControl object that dictates the conditions under which the fan is turned on. If None, a default VentilationControl will be generated, which will keep the fan on all of the time.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationControlAbridged"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "VentilationFan",
        "description": "Base class for all objects requiring a valid EnergyPlus identifier.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "InternalMassAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "construction",
              "area"
            ],
            "properties": {
              "construction": {
                "title": "Construction",
                "description": "Identifier for an OpaqueConstruction that represents the material that the internal thermal mass is composed of.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "area": {
                "title": "Area",
                "description": "A number representing the surface area of the internal mass that is exposed to the Room air. This value should always be in square meters regardless of what units system the parent model is a part of.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "InternalMassAbridged",
                "pattern": "^InternalMassAbridged$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "InternalMassAbridged",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomEnergyPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "RoomEnergyPropertiesAbridged",
                "pattern": "^RoomEnergyPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "construction_set": {
                "title": "Construction Set",
                "description": "Identifier of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "program_type": {
                "title": "Program Type",
                "description": "Identifier of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "hvac": {
                "title": "Hvac",
                "description": "An optional identifier of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "shw": {
                "title": "Shw",
                "description": "An optional identifier of a Service Hot Water (SHW) system that specifies how the hot water load of the Room is met. If None, the hot water load will be met with a generic system that only measures thermal loadand does not account for system efficiencies.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "people": {
                "title": "People",
                "description": "People object to describe the occupancy of the Room.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PeopleAbridged"
                  }
                ]
              },
              "lighting": {
                "title": "Lighting",
                "description": "Lighting object to describe the lighting usage of the Room.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LightingAbridged"
                  }
                ]
              },
              "electric_equipment": {
                "title": "Electric Equipment",
                "description": "ElectricEquipment object to describe the electric equipment usage.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ElectricEquipmentAbridged"
                  }
                ]
              },
              "gas_equipment": {
                "title": "Gas Equipment",
                "description": "GasEquipment object to describe the gas equipment usage.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GasEquipmentAbridged"
                  }
                ]
              },
              "service_hot_water": {
                "title": "Service Hot Water",
                "description": "ServiceHotWater object to describe the hot water usage.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServiceHotWaterAbridged"
                  }
                ]
              },
              "infiltration": {
                "title": "Infiltration",
                "description": "Infiltration object to to describe the outdoor air leakage.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InfiltrationAbridged"
                  }
                ]
              },
              "ventilation": {
                "title": "Ventilation",
                "description": "Ventilation object for the minimum outdoor air requirement.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationAbridged"
                  }
                ]
              },
              "setpoint": {
                "title": "Setpoint",
                "description": "Setpoint object for the temperature setpoints of the Room.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SetpointAbridged"
                  }
                ]
              },
              "daylighting_control": {
                "title": "Daylighting Control",
                "description": "An optional DaylightingControl object to dictate the dimming of lights. If None, the lighting will respond only to the schedule and not the daylight conditions within the room.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DaylightingControl"
                  }
                ]
              },
              "window_vent_control": {
                "title": "Window Vent Control",
                "description": "An optional VentilationControl object to dictate the opening of windows. If None, the windows will never open.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VentilationControlAbridged"
                  }
                ]
              },
              "fans": {
                "title": "Fans",
                "description": "An optional list of VentilationFan objects for fans within the room. Note that these fans are not connected to the heating or cooling system and are meant to represent the intentional circulation of unconditioned outdoor air for the purposes of keeping a space cooler, drier or free of indoor pollutants (as in the case of kitchen or bathroom exhaust fans). For the specification of mechanical ventilation of conditioned outdoor air, the Room.ventilation property should be used and the Room should be given a HVAC that can meet this specification.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VentilationFan"
                }
              },
              "internal_masses": {
                "title": "Internal Masses",
                "description": "An optional list of of InternalMass objects for thermal mass exposed to Room air. Note that internal masses assigned this way cannot \"see\" solar radiation that may potentially hit them and, as such, caution should be taken when using this component with internal mass objects that are not always in shade. Masses are factored into the the thermal calculations of the Room by undergoing heat transfer with the indoor air.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InternalMassAbridged"
                }
              },
              "process_loads": {
                "title": "Process Loads",
                "description": "An optional list of of Process objects for process loads within the room. These can represent kilns, manufacturing equipment, and various industrial processes. They can also be used to represent wood burning fireplaces or certain pieces of equipment to be separated from the other end uses.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProcessAbridged"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RoomEnergyPropertiesAbridged",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomDoe2Properties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "RoomDoe2Properties",
                "pattern": "^RoomDoe2Properties$",
                "type": "string",
                "readOnly": true
              },
              "assigned_flow": {
                "title": "Assigned Flow",
                "description": "A number for the design supply air flow rate for the zone the Room is assigned to (cfm). This establishes the minimum allowed design air flow. Note that the actual design flow may be larger. If Autocalculate, this parameter will not be written into the INP.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "flow_per_area": {
                "title": "Flow Per Area",
                "description": "A number for the design supply air flow rate to the zone per unit floor area (cfm/ft2). If Autocalculate, this parameter will not be written into the INP.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "min_flow_ratio": {
                "title": "Min Flow Ratio",
                "description": "A number between 0 and 1 for the minimum allowable zone air supply flow rate, expressed as a fraction of design flow rate. Applicable to variable-volume type systems only. If Autocalculate, this parameter will not be written into the INP.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "min_flow_per_area": {
                "title": "Min Flow Per Area",
                "description": "A number for the minimum air flow per square foot of floor area (cfm/ft2). This is an alternative way of specifying the min_flow_ratio. If Autocalculate, this parameter will not be written into the INP.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "hmax_flow_ratio": {
                "title": "Hmax Flow Ratio",
                "description": "A number between 0 and 1 for the ratio of the maximum (or fixed) heating airflow to the cooling airflow. The specific meaning varies according to the type of zone terminal. If Autocalculate, this parameter will not be written into the INP.",
                "default": {
                  "type": "Autocalculate"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Autocalculate"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "space_polygon_geometry": {
                "title": "Space Polygon Geometry",
                "description": "An optional horizontal Face3D object, which will be used to set the SPACE polygon during export to INP. If None, the SPACE polygon is auto-calculated from the 3D Room geometry. Specifying a geometry here can help overcome some limitations of this auto-calculation, particularly for cases where the floors of the Room are composed of AirBoundaries.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "RoomDoe2Properties",
        "description": "Base class for all objects that are not extensible with additional keys.\n\nThis effectively includes all objects except for the Properties classes\nthat are assigned to geometry objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomPropertiesAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "RoomPropertiesAbridged",
                "pattern": "^RoomPropertiesAbridged$",
                "type": "string",
                "readOnly": true
              },
              "energy": {
                "$ref": "#/components/schemas/RoomEnergyPropertiesAbridged"
              },
              "radiance": {
                "$ref": "#/components/schemas/RoomRadiancePropertiesAbridged"
              },
              "doe2": {
                "$ref": "#/components/schemas/RoomDoe2Properties"
              }
            }
          }
        ],
        "title": "RoomPropertiesAbridged",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LengthUnits": {
        "title": "LengthUnits",
        "description": "An enumeration.",
        "enum": [
          "Decimal feet",
          "Feet and fractional inches",
          "Decimal inches",
          "Fractional inches",
          "Meters",
          "Decimeters",
          "Centimeters",
          "Millimeters",
          "Meters and centimeters"
        ]
      },
      "AreaUnits": {
        "title": "AreaUnits",
        "description": "An enumeration.",
        "enum": [
          "Square feet",
          "Square inches",
          "Square meters",
          "Square centimeters",
          "Square millimeters",
          "Acres",
          "Hectares"
        ]
      },
      "RevitDocumentSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "length_unit": {
                "$ref": "#/components/schemas/LengthUnits"
              },
              "area_unit": {
                "$ref": "#/components/schemas/AreaUnits"
              },
              "tolerance": {
                "title": "Tolerance",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "RevitDocumentSettings",
                "type": "string",
                "pattern": "^RevitDocumentSettings$",
                "readOnly": true
              }
            },
            "required": [
              "length_unit",
              "area_unit",
              "tolerance"
            ]
          }
        ],
        "title": "RevitDocumentSettings",
        "description": "Revit document settings that are useful for Pollination interactions.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GeometryCalculation": {
        "title": "GeometryCalculation",
        "description": "Geometry calculation method.",
        "enum": [
          "Extruded Floors",
          "Full Volume"
        ]
      },
      "WindowCalculation": {
        "title": "WindowCalculation",
        "description": "Window calculation options.",
        "enum": [
          "Detailed",
          "SimpleRatio"
        ]
      },
      "PollinationParameters": {
        "title": "PollinationParameters",
        "description": "An enumeration.",
        "enum": [
          "AREA_Number",
          "AREA_Name",
          "AREA_Level",
          "AREA_Area",
          "AREA_Perimeter",
          "AREA_Image",
          "AREA_Comments",
          "AREA_ComputationHeight",
          "AREA_Area Type",
          "ROOM_Number",
          "ROOM_Name",
          "ROOM_Level",
          "ROOM_Upper Limit",
          "ROOM_Limit Offset",
          "ROOM_Area",
          "ROOM_Perimeter",
          "ROOM_Unbounded Height",
          "ROOM_Volume",
          "ROOM_Phase",
          "ROOM_Image",
          "ROOM_Comments",
          "ROOM_Base Offset",
          "ROOM_Department",
          "ROOM_Base Finish",
          "ROOM_Ceiling Finish",
          "ROOM_Wall Finish",
          "ROOM_Floor Finish",
          "ROOM_Occupant",
          "ROOM_Computation Height",
          "ROOM_Occupancy",
          "SPACE_Number",
          "SPACE_Name",
          "SPACE_Level",
          "SPACE_Upper Limit",
          "SPACE_Limit Offset",
          "SPACE_Area",
          "SPACE_Perimeter",
          "SPACE_Unbounded Height",
          "SPACE_Volume",
          "SPACE_Phase",
          "SPACE_Room Number",
          "SPACE_Room Name",
          "SPACE_Zone",
          "SPACE_Plenum",
          "SPACE_Occupiable",
          "SPACE_Condition Type",
          "SPACE_Space Type",
          "SPACE_Construction Type",
          "SPACE_People",
          "SPACE_Electric Loads",
          "SPACE_Outdoor Air Information",
          "SPACE_Outdoor Air per Person",
          "SPACE_Outdoor Air per Area",
          "SPACE_Specified Supply Airflow",
          "SPACE_Calculated Supply Airflow",
          "SPACE_Actual Supply Airflow",
          "SPACE_Return Airflow",
          "SPACE_Specified Return Airflow",
          "SPACE_Actual Return Airflow",
          "SPACE_Specified Exhaust Airflow",
          "SPACE_Actual Exhaust Airflow",
          "SPACE_Outdoor Airflow",
          "SPACE_Design HVAC Load per area",
          "SPACE_Design Other Load per area",
          "SPACE_Average Estimated Illumination",
          "SPACE_Room Cavity Ratio",
          "SPACE_Lighting Calculation Workplane",
          "SPACE_Lighting Calculation Luminaire Plane",
          "SPACE_Ceiling Reflectance",
          "SPACE_Wall Reflectance",
          "SPACE_Floor Reflectance",
          "SPACE_Air Changes per Hour",
          "SPACE_Outdoor Air Method",
          "SPACE_Calculated Heating Load",
          "SPACE_Design Heating Load",
          "SPACE_Calculated Cooling Load",
          "SPACE_Design Cooling Load",
          "SPACE_Image",
          "SPACE_Comments",
          "SPACE_Base Offset",
          "SPACE_Computational Height",
          "POLLINATION_Extrusion Height",
          "POLLINATION_Elevation",
          "POLLINATION_Construction Set",
          "POLLINATION_Modifier Set",
          "POLLINATION_Program Type",
          "POLLINATION_HVAC"
        ]
      },
      "RoomExportSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "room_parsing_routine": {
                "description": "The routine for parsing the Pollination rooms from the Revit geometry. The options are extruded routine and full volume.",
                "default": "Extruded Floors",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeometryCalculation"
                  }
                ]
              },
              "aperture_parsing_routine": {
                "description": "The routine for parsing the apertures. It can be detailed geometry or simplified window to wall ratio.",
                "default": "Detailed",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WindowCalculation"
                  }
                ]
              },
              "arc_subdivision_length": {
                "title": "Arc Subdivision Length",
                "description": "Set the maximum length in ft to subdivide the arcs.",
                "default": 2,
                "type": "number",
                "format": "double"
              },
              "tolerance": {
                "title": "Tolerance",
                "description": "Set the tolerance for parsing the geometries in ft.",
                "default": 0.003,
                "type": "number",
                "format": "double"
              },
              "minimum_hole_area": {
                "title": "Minimum Hole Area",
                "description": "A number in Revit documents units for the minimum area of a hole that should be included in the room during the export.",
                "default": 0,
                "type": "number",
                "format": "double"
              },
              "timeout": {
                "title": "Timeout",
                "description": "Set the limit in seconds for how long to wait for parsing a single room before automatically skipping the room.",
                "type": "number",
                "format": "double"
              },
              "user_data": {
                "description": "A list of values to be extracted from object parameters in Revit.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PollinationParameters"
                }
              },
              "type": {
                "title": "Type",
                "default": "RoomExportSettings",
                "type": "string",
                "pattern": "^RoomExportSettings$",
                "readOnly": true
              }
            }
          }
        ],
        "title": "RoomExportSettings",
        "description": "The user settings for parsing Pollination rooms from Revit.\n\nThese settings can be applied to Revit rooms, spaces or areas.\n\nRevit will use the Level parsing settings if any of the values is not set.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoomExportByIdSetting": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "elements": {
                "title": "Elements",
                "description": "List of Room Element info.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoomElementInfo"
                }
              },
              "export_settings": {
                "title": "Export Settings",
                "description": "Export rooms settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoomExportSettings"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "RoomExportByIdSetting",
                "type": "string",
                "pattern": "^RoomExportByIdSetting$",
                "readOnly": true
              }
            },
            "required": [
              "elements",
              "export_settings"
            ]
          }
        ],
        "title": "RoomExportByIdSetting",
        "description": "Payload for exporting a list of rooms, spaces or areas by their ID.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FaceType": {
        "title": "FaceType",
        "description": "An enumeration.",
        "enum": [
          "Wall",
          "Floor",
          "RoofCeiling",
          "AirBoundary"
        ],
        "type": "string"
      },
      "Face": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdBaseModel"
          },
          {
            "type": "object",
            "required": [
              "geometry",
              "face_type",
              "boundary_condition",
              "properties"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "Planar Face3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "face_type": {
                "$ref": "#/components/schemas/FaceType"
              },
              "boundary_condition": {
                "title": "Boundary Condition",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Ground"
                  },
                  {
                    "$ref": "#/components/schemas/Outdoors"
                  },
                  {
                    "$ref": "#/components/schemas/Adiabatic"
                  },
                  {
                    "$ref": "#/components/schemas/Surface"
                  },
                  {
                    "$ref": "#/components/schemas/OtherSideTemperature"
                  }
                ]
              },
              "properties": {
                "title": "Properties",
                "description": "Extension properties for particular simulation engines (Radiance, EnergyPlus).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FacePropertiesAbridged"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "Face",
                "pattern": "^Face$",
                "type": "string",
                "readOnly": true
              },
              "apertures": {
                "title": "Apertures",
                "description": "Apertures assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Aperture"
                }
              },
              "doors": {
                "title": "Doors",
                "description": "Doors assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Door"
                }
              },
              "indoor_shades": {
                "title": "Indoor Shades",
                "description": "Shades assigned to the interior side of this object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              },
              "outdoor_shades": {
                "title": "Outdoor Shades",
                "description": "Shades assigned to the exterior side of this object (eg. balcony, overhang).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Face",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Room": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdBaseModel"
          },
          {
            "type": "object",
            "required": [
              "faces",
              "properties"
            ],
            "properties": {
              "faces": {
                "title": "Faces",
                "description": "Faces that together form the closed volume of a room.",
                "minItems": 4,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Face"
                }
              },
              "properties": {
                "title": "Properties",
                "description": "Extension properties for particular simulation engines (Radiance, EnergyPlus).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoomPropertiesAbridged"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "Room",
                "pattern": "^Room$",
                "type": "string",
                "readOnly": true
              },
              "indoor_shades": {
                "title": "Indoor Shades",
                "description": "Shades assigned to the interior side of this object (eg. partitions, tables).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              },
              "outdoor_shades": {
                "title": "Outdoor Shades",
                "description": "Shades assigned to the exterior side of this object (eg. trees, landscaping).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shade"
                }
              },
              "multiplier": {
                "title": "Multiplier",
                "description": "An integer noting how many times this Room is repeated. Multipliers are used to speed up the calculation when similar Rooms are repeated more than once. Essentially, a given simulation with the Room is run once and then the result is multiplied by the multiplier.",
                "default": 1,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              },
              "exclude_floor_area": {
                "title": "Exclude Floor Area",
                "description": "A boolean for whether the Room floor area contributes to Models it is a part of. Note that this will not affect the floor_area property of this Room itself but it will ensure the Room floor area is excluded from any calculations when the Room is part of a Model, including EUI calculations.",
                "default": false,
                "type": "boolean"
              },
              "story": {
                "title": "Story",
                "description": "Text string for the story identifier to which this Room belongs. Rooms sharing the same story identifier are considered part of the same story in a Model. Note that this property has no character restrictions.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Room",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PORoom": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "The object name in Revit.",
                "type": "string"
              },
              "number": {
                "title": "Number",
                "description": "The object number in Revit.",
                "type": "string"
              },
              "identifier": {
                "title": "Identifier",
                "description": "The object  identifier in Revit.",
                "type": "string",
                "format": "uuid4"
              },
              "level": {
                "title": "Level",
                "description": "The Revit level name.",
                "type": "string"
              },
              "source_type": {
                "description": "The type of this entity in Revit. The valid values are room, space or area.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoomGeometrySource"
                  }
                ]
              },
              "room": {
                "title": "Room",
                "description": "A Room2D (Dragonfly room) or Room3D (Honeybee room).",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  },
                  {
                    "$ref": "#/components/schemas/Room2D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "PORoom",
                "type": "string",
                "pattern": "^PORoom$",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "number",
              "identifier",
              "level",
              "source_type",
              "room"
            ]
          }
        ],
        "title": "PORoom",
        "description": "A parsed Revit room translated to a Pollination room.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "IDdBaseModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "identifier": {
                "title": "Identifier",
                "description": "Text string for a unique object ID. This identifier remains constant as the object is mutated, copied, and serialized to different formats (eg. dict, idf, rad). This identifier is also used to reference the object across a Model. It must be < 100 characters and not contain any spaces or special characters.",
                "maxLength": 100,
                "minLength": 1,
                "pattern": "^[.A-Za-z0-9_-]+$",
                "type": "string"
              },
              "display_name": {
                "title": "Display Name",
                "description": "Display name of the object with no character restrictions.",
                "type": "string"
              },
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "IDdBaseModel",
                "type": "string",
                "pattern": "^IDdBaseModel$",
                "readOnly": true
              }
            },
            "required": [
              "identifier"
            ],
            "additionalProperties": false
          }
        ],
        "title": "IDdBaseModel",
        "description": "Base class for all objects requiring a identifiers acceptable for all engines.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "IDdEnergyBaseModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnergyBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "IDdEnergyBaseModel",
                "type": "string",
                "pattern": "^IDdEnergyBaseModel$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "IDdEnergyBaseModel",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "EnergyBaseModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "identifier": {
                "title": "Identifier",
                "description": "Text string for a unique object ID. This identifier remains constant as the object is mutated, copied, and serialized to different formats (eg. dict, idf, osm). This identifier is also used to reference the object across a Model. It must be < 100 characters, use only ASCII characters and exclude (, ; ! \\n \\t).",
                "maxLength": 100,
                "minLength": 1,
                "pattern": "^[^,;!\\n\\t]+$",
                "type": "string"
              },
              "display_name": {
                "title": "Display Name",
                "description": "Display name of the object with no character restrictions.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "EnergyBaseModel",
                "type": "string",
                "pattern": "^EnergyBaseModel$",
                "readOnly": true
              }
            },
            "required": [
              "identifier"
            ],
            "additionalProperties": false
          }
        ],
        "title": "EnergyBaseModel",
        "description": "Base class for all objects requiring a valid EnergyPlus identifier.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_PropertiesBaseAbridged": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "modifier": {
                "title": "Modifier",
                "description": "A string for a Honeybee Radiance Modifier (default: None).",
                "type": "string"
              },
              "modifier_blk": {
                "title": "Modifier Blk",
                "description": "A string for a Honeybee Radiance Modifier to be used in direct solar simulations and in isolation studies (assessingthe contribution of individual objects) (default: None).",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "_PropertiesBaseAbridged",
                "type": "string",
                "pattern": "^_PropertiesBaseAbridged$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "_PropertiesBaseAbridged",
        "description": "Base class of Abridged Radiance Properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_GridParameterBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "dimension": {
                "title": "Dimension",
                "description": "The dimension of the grid cells as a number.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "include_mesh": {
                "title": "Include Mesh",
                "description": "A boolean to note whether the resulting SensorGrid should include the mesh.",
                "default": true,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "default": "_GridParameterBase",
                "type": "string",
                "pattern": "^_GridParameterBase$",
                "readOnly": true
              }
            },
            "required": [
              "dimension"
            ],
            "additionalProperties": false
          }
        ],
        "title": "_GridParameterBase",
        "description": "Base object for all GridParameters.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_LouversBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "depth": {
                "title": "Depth",
                "description": "A number for the depth to extrude the louvers.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "offset": {
                "title": "Offset",
                "description": "A number for the distance to louvers from the wall.",
                "default": 0,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "angle": {
                "title": "Angle",
                "description": "A number between -90 and 90 for the for an angle to rotate the louvers in degrees. 0 indicates louvers perpendicular to the wall. Positive values indicate a downward rotation. Negative values indicate an upward rotation.",
                "default": 0,
                "minimum": -90,
                "maximum": 90,
                "type": "number",
                "format": "double"
              },
              "contour_vector": {
                "title": "Contour Vector",
                "description": "A list of two float values representing the (x, y) of a 2D vector for the direction along which contours are generated. (0, 1) will generate horizontal contours, (1, 0) will generate vertical contours, and (1, 1) will generate diagonal contours.",
                "default": [
                  0,
                  1
                ],
                "minItems": 2,
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "flip_start_side": {
                "title": "Flip Start Side",
                "description": "Boolean to note whether the side the louvers start from should be flipped. Default is False to have contours on top or right. Setting to True will start contours on the bottom or left.",
                "default": false,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "default": "_LouversBase",
                "type": "string",
                "pattern": "^_LouversBase$",
                "readOnly": true
              }
            },
            "required": [
              "depth"
            ],
            "additionalProperties": false
          }
        ],
        "title": "_LouversBase",
        "description": "Base class for for a series of louvered shades over a wall.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_EquipmentBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDdEnergyBaseModel"
          },
          {
            "type": "object",
            "required": [
              "watts_per_area",
              "schedule"
            ],
            "properties": {
              "watts_per_area": {
                "title": "Watts Per Area",
                "description": "Equipment level per floor area as [W/m2].",
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "schedule": {
                "title": "Schedule",
                "description": "Identifier of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile.",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "radiant_fraction": {
                "title": "Radiant Fraction",
                "description": "Number for the amount of long-wave radiation heat given off by equipment. Default value is 0.",
                "default": 0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "latent_fraction": {
                "title": "Latent Fraction",
                "description": "Number for the amount of latent heat given off by equipment. Default value is 0.",
                "default": 0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "lost_fraction": {
                "title": "Lost Fraction",
                "description": "Number for the amount of \u201clost\u201d heat being given off by equipment. The default value is 0.",
                "default": 0,
                "minimum": 0,
                "maximum": 1,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "_EquipmentBase",
                "type": "string",
                "pattern": "^_EquipmentBase$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "_EquipmentBase",
        "description": "Base class for all objects requiring an EnergyPlus identifier and user_data.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_WindowParameterBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list). When a list is used, each item in the list will be assigned to the generated Honeybee apertures.",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "_WindowParameterBase",
                "type": "string",
                "pattern": "^_WindowParameterBase$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "_WindowParameterBase",
        "description": "Base class for all window parameters.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "IDdRadianceBaseModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "identifier": {
                "title": "Identifier",
                "description": "Text string for a unique Radiance object. Must not contain spaces or special characters. This will be used to identify the object across a model and in the exported Radiance files.",
                "minLength": 1,
                "pattern": "^[.A-Za-z0-9_-]+$",
                "type": "string"
              },
              "display_name": {
                "title": "Display Name",
                "description": "Display name of the object with no character restrictions.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "IDdRadianceBaseModel",
                "type": "string",
                "pattern": "^IDdRadianceBaseModel$",
                "readOnly": true
              }
            },
            "required": [
              "identifier"
            ],
            "additionalProperties": false
          }
        ],
        "title": "IDdRadianceBaseModel",
        "description": "Base class for all objects requiring a valid Radiance identifier.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_OpenAPIGenBaseModel": {
        "title": "_OpenAPIGenBaseModel",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "A base class to use when there is no baseclass available to fall on.",
            "default": "InvalidType",
            "type": "string",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string",
            "readOnly": true
          }
        }
      }
    }
  }
}